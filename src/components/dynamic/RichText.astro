---
import {
  documentToHtmlString,
  type Options,
} from "@contentful/rich-text-html-renderer";
import { BLOCKS, INLINES } from "@contentful/rich-text-types";
import {
  isTypeButton,
  type TypeComponentRichText,
} from "@lib/generated/contentful";
import {
  escapeNewLines,
  renderRichTextPicture,
  renderRichTextTable,
} from "@lib/richtext";
import type { ChainModifier } from "@lib/types";
import { isOurHost, prependSlash } from "@lib/utils";

interface Props extends TypeComponentRichText<ChainModifier, string> {}

const options: Partial<Options> = {
  renderMark: {},
  renderNode: {
    [BLOCKS.HEADING_1]: (node, next) =>
      `<h1>${escapeNewLines(next(node.content))}</h1>`,
    [BLOCKS.HEADING_2]: (node, next) =>
      `<h2>${escapeNewLines(next(node.content))}</h2>`,
    [BLOCKS.HEADING_3]: (node, next) =>
      `<h3>${escapeNewLines(next(node.content))}</h3>`,
    [BLOCKS.HEADING_4]: (node, next) =>
      `<h4>${escapeNewLines(next(node.content))}</h4>`,
    [BLOCKS.HEADING_5]: (node, next) =>
      `<h5>${escapeNewLines(next(node.content))}</h5>`,
    [BLOCKS.HEADING_6]: (node, next) =>
      `<h6>${escapeNewLines(next(node.content))}</h6>`,
    [BLOCKS.PARAGRAPH]: (node, next) =>
      `<p>${escapeNewLines(next(node.content))}</p>`,
    [BLOCKS.TABLE]: renderRichTextTable,
    [BLOCKS.TABLE_CELL]: (node, next) =>
      `<td class="px-4 py-2">${escapeNewLines(next(node.content))}</td>`,
    [BLOCKS.TABLE_HEADER_CELL]: (node, next) =>
      `<td class="bo px-4 py-2">${escapeNewLines(next(node.content))}</td>`,
    [BLOCKS.EMBEDDED_ASSET]: renderRichTextPicture,
    [INLINES.HYPERLINK]: ({ data: { uri }, content }, next) =>
      `<a href="${uri}" target="${
        isOurHost(uri) ? "_self" : "_blank"
      }" class="link-underline link-underline--fixed">${escapeNewLines(next(content))}</a>`,
    [INLINES.ENTRY_HYPERLINK]: ({ data: { target }, content }, next) => {
      const url = target.fields.slug;
      return `<a href="${prependSlash(url)}" class="link-underline link-underline--fixed">${escapeNewLines(next(content))}</a>`;
    },
    [BLOCKS.EMBEDDED_ENTRY]: ({ data: { target } }) => {
      if (isTypeButton<ChainModifier, string>(target)) {
        const { label, variant, url, page } = target.fields;
        const href = url ?? page?.fields.slug;
        if (!label || !href) return "";
        const variantClass =
          variant === "Rosso" ? "button--red" : "button--white";
        const targetType = (url ?? isOurHost(href)) ? "_blank" : "_self";
        return `<a href="${href}" target="${targetType}" class="button ${variantClass}">${escapeNewLines(label)}</a>`;
      }
      return "";
    },
  },
};

const {
  fields: { content, noMargin },
} = Astro.props;

let contentString = "";

if (content) {
  contentString = documentToHtmlString(content, options);
}
---

<div
  class:list={[
    "rich-text mx-auto w-full",
    { "rich-text--no-margin": noMargin },
  ]}
  set:html={contentString}
/>
